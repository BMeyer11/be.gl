#!/usr/bin/env perl
use Mojolicious::Lite;
use Digest::MD5 qw(md5_hex);
use Mojo::Redis2;
use Mojo::JSON 'j';

helper redis => sub { shift->stash->{redis} ||= Mojo::Redis2->new; };

get '/' => => sub { my $c = shift; $c->redirect_to('code', code => $c->param('code') || substr(md5_hex(scalar localtime),0,3)) };

get '/:code' => {code => ''} => sub {
  my $c = shift;
  my $code = $c->param('code');
  my $loc = j($c->redis->get($code) || '[]');
  $c->render(code => $code, loc => $loc);
};

post '/:code' => sub {
  my $c = shift;
  my ($code, $geo) = ($c->param('code'), [$c->param('lat'), $c->param('lon')]);
  $c->app->log->info($code . ' : '. join ',', @$geo);
  $c->redis->set($code => j($geo)) unless $c->redis->get($code);
  $c->redis->expire($code => 3 * 60);
  $c->render(json => {$code => $geo});
};

app->start;
__DATA__

@@ code.html.ep
<!DOCTYPE html>
<html lang="en">
  <head>
    <link href="http://ctrlq.org/common/css/bootstrap.min.css" rel="stylesheet">
    <link href="style.css" rel="stylesheet">
  </head>
  <body>
    <!-- Code: <input name=code value="<%= $code %>" /><div id="code-btn">Submit</div><br /> -->
    <img src="/beagle.jpg" />
    <br /><div><a href="/<%= $code %>"><div id="code" class="link"><%= $code %></div></a><div class="link"> : </div><a id="map" href="#"><div id="loc" class="link"></div></a></div>
    <br />
    <form action="/" method="get">
      <input name="code" />
      <input type="submit" value="Locate!" />
    </form>
    <div id="googlemaps"></div>

    <script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDKw1I9ZlI-piCBp2zXSuviBDVRjju-aYI&sensor=true&libraries=adsense"></script>
    <script src="geoposition.js"></script>
    <script src="http://ctrlq.org/common/js/jquery.min.js"></script>
    <script src="http://ctrlq.org/common/js/bootstrap.min.js"></script>
    <script src="http://ctrlq.org/common/js/ga.js"></script>
    <script>
      function locationFound(position) {
      % if ( @$loc ) {
        showMap(<%= $loc->[0] %>, <%= $loc->[1] %>);
        $('#loc').html(<%= $loc->[0] %> + ', ' + <%= $loc->[1] %>);
        $('#map').attr('href', "https://www.google.com/maps/place/<%= $loc->[0] %>,<%= $loc->[1] %>/\@<%= $loc->[0] %>,<%= $loc->[1] %>,15z/data=!3m1!4b1!4m2!3m1!1s0x0:0x0");
      % } else {
        showMap(position.coords.latitude, position.coords.longitude);
        $('#loc').html(position.coords.latitude + ', ' + position.coords.longitude);
        $('#map').attr('href', "https://www.google.com/maps/place/"+position.coords.latitude+","+position.coords.longitude+"/\@"+position.coords.latitude+","+position.coords.longitude+",15z/data=!3m1!4b1!4m2!3m1!1s0x0:0x0");
	$.post('/<%= $code %>', {lat: position.coords.latitude, lon: position.coords.longitude});
      % }
      }
      $('#map').hover(function(){$('#googlemaps').show()},function(){$('#googlemaps').hide()});
    </script>
    <script src="functions.js"></script>

  </body>
</html>

@@ style.css
html, body {
  height: 100%; margin: 0; padding: 0;
}
form{margin:0}
.navbar-inner {padding:.5em;border-radius:0;-moz-border-radius:0;}
h1 {font-size:18px;}
h3 {margin-bottom:.5em; }
#googlemaps { height: 90%; display: none }
#iw {width:260px;font-family:monospace;}
#code {background-color: yellowgreen}
div {padding:.5em;margin:.5em;display:inline;align-vertical:bottom;height:100px}
.link {padding:.5em;margin:.5em;font-size:40px;align-vertical:bottom}
.navbar {margin:0}
img {max-width:none;}
hr {margin:5px 0}

@@ geoposition.js
//
// javascript-mobile-desktop-geolocation
// https://github.com/estebanav/javascript-mobile-desktop-geolocation
//
// Copyright J. Esteban Acosta VillafaÃ±e
// Licensed under the MIT licenses.
//
// Based on Stan Wiechers > geo-location-javascript v0.4.8 > http://code.google.com/p/geo-location-javascript/
//
// Revision: $Rev: 01 $: 
// Author: $Author: estebanav $:
// Date: $Date: 2012-09-07 23:03:53 -0300 (Fri, 07 Sep 2012) $:    

var bb = { 
        success: 0,
        error: 0,
        blackberryTimeoutId : -1
    };

function handleBlackBerryLocationTimeout()
{
	if(bb.blackberryTimeoutId!=-1) {
		bb.error({ message:     "Timeout error", 
                   code:        3
               });
	}
}
function handleBlackBerryLocation()
{
		clearTimeout(bb.blackberryTimeoutId);
		bb.blackberryTimeoutId=-1;
        if (bb.success && bb.error) {
                if(blackberry.location.latitude==0 && blackberry.location.longitude==0) {
                        //http://dev.w3.org/geo/api/spec-source.html#position_unavailable_error
                        //POSITION_UNAVAILABLE (numeric value 2)
                        bb.error({message:"Position unavailable", code:2});
                }
                else
                {  
                        var timestamp=null;
                        //only available with 4.6 and later
                        //http://na.blackberry.com/eng/deliverables/8861/blackberry_location_568404_11.jsp
                        if (blackberry.location.timestamp)
                        {
                                timestamp = new Date( blackberry.location.timestamp );
                        }
                        bb.success( { timestamp:    timestamp , 
                                      coords: { 
                                            latitude:  blackberry.location.latitude,
                                            longitude: blackberry.location.longitude
                                        }
                                    });
                }
                //since blackberry.location.removeLocationUpdate();
                //is not working as described http://na.blackberry.com/eng/deliverables/8861/blackberry_location_removeLocationUpdate_568409_11.jsp
                //the callback are set to null to indicate that the job is done

                bb.success = null;
                bb.error = null;
        }
}

var geoPosition=function() {

        var pub = {};
        var provider=null;
		var u="undefined";
        var ipGeolocationSrv = 'http://freegeoip.net/json/?callback=JSONPCallback';

        pub.getCurrentPosition = function(success,error,opts)
        {
                provider.getCurrentPosition(success, error,opts);
        }

        pub.jsonp = {
            callbackCounter: 0,

            fetch: function(url, callback) {
                var fn = 'JSONPCallback_' + this.callbackCounter++;
                window[fn] = this.evalJSONP(callback);
                url = url.replace('=JSONPCallback', '=' + fn);

                var scriptTag = document.createElement('SCRIPT');
                scriptTag.src = url;
                document.getElementsByTagName('HEAD')[0].appendChild(scriptTag);
            },

            evalJSONP: function(callback) {
                return function(data) {
                    callback(data);
                }
            }
        }
		        

        pub.init = function()
        {			
                try
                {
                    //console.debug(( typeof(geoPositionSimulator)!=u ) && (geoPositionSimulator.length > 0 ) );
                    if ( ( typeof(geoPositionSimulator)!=u ) && (geoPositionSimulator.length > 0 ) ){
                            provider=geoPositionSimulator;
                    } else if (typeof(bondi)!=u && typeof(bondi.geolocation)!=u  ) {
                            provider=bondi.geolocation;
                    } else if (typeof(navigator.geolocation)!=u) {
                            provider=navigator.geolocation;
                            pub.getCurrentPosition = function(success, error, opts) {
                                    function _success(p) {
                                            //for mozilla geode,it returns the coordinates slightly differently
                                            var params;
                                            if(typeof(p.latitude)!=u) {
                                                    params = {
                                                        timestamp: p.timestamp, 
                                                        coords: {
                                                            latitude:  p.latitude,
                                                            longitude: p.longitude
                                                        }
                                                    };
                                            } else {
                                                    params = p;
                                            }
                                            success( params );
                                    }
                                    provider.getCurrentPosition(_success,error,opts);
                            }
                    } else if(typeof(window.blackberry)!=u && blackberry.location.GPSSupported) {
                            // set to autonomous mode
							if(typeof(blackberry.location.setAidMode)==u) {
                                return false;									
							}
							blackberry.location.setAidMode(2);
                            //override default method implementation
                            pub.getCurrentPosition = function(success,error,opts)
                            {
									//alert(parseFloat(navigator.appVersion));
                                    //passing over callbacks as parameter didn't work consistently
                                    //in the onLocationUpdate method, thats why they have to be set
                                    //outside
                                    bb.success = success;
                                    bb.error = error;
                                    //function needs to be a string according to
                                    //http://www.tonybunce.com/2008/05/08/Blackberry-Browser-Amp-GPS.aspx
									if(opts['timeout']) {
									 	bb.blackberryTimeoutId = setTimeout("handleBlackBerryLocationTimeout()",opts['timeout']);
									} else {
                                        //default timeout when none is given to prevent a hanging script
										bb.blackberryTimeoutId = setTimeout("handleBlackBerryLocationTimeout()",60000);
									}								
									blackberry.location.onLocationUpdate("handleBlackBerryLocation()");
                                    blackberry.location.refreshLocation();
                            }
                            provider = blackberry.location;				
                    
                    } else if ( typeof(Mojo) !=u && typeof(Mojo.Service.Request)!="Mojo.Service.Request") {
                            provider = true;
                            pub.getCurrentPosition = function(success, error, opts) {
                                parameters = {};
                                if( opts ) {
                                     //http://developer.palm.com/index.php?option=com_content&view=article&id=1673#GPS-getCurrentPosition
                                     if (opts.enableHighAccuracy && opts.enableHighAccuracy == true ){
                                            parameters.accuracy = 1;
                                     }
                                     if ( opts.maximumAge ) {
                                            parameters.maximumAge = opts.maximumAge;
                                     }
                                     if (opts.responseTime) {
                                            if( opts.responseTime < 5 ) {
                                                    parameters.responseTime = 1;
                                            } else if ( opts.responseTime < 20 ) {
                                                    parameters.responseTime = 2;
                                            } else {
                                                    parameters.timeout = 3;
                                            }
                                     }
                            }

                             r = new Mojo.Service.Request( 'palm://com.palm.location' , {
                                    method:"getCurrentPosition",
                                        parameters:parameters,
                                        onSuccess: function( p ){
                                            success( { timestamp: p.timestamp, 
                                                       coords: {
                                                            latitude:  p.latitude, 
                                                            longitude: p.longitude,
                                                            heading:   p.heading
                                                        }
                                                    });
                                        },
                                        onFailure: function( e ){
                                                            if (e.errorCode==1) {
                                                                error({ code:       3,
                                                                        message:    "Timeout"
                                                                    });
                                                            } else if (e.errorCode==2){
                                                                error({ code:       2,
                                                                        message:    "Position unavailable" 
                                                                    });
                                                            } else {
                                                                error({ code:       0,
                                                                        message:    "Unknown Error: webOS-code" + errorCode 
                                                                    });
                                                            }
                                                    }
                                        });
                            }

                    }
                    else if (typeof(device)!=u && typeof(device.getServiceObject)!=u) {
                            provider=device.getServiceObject("Service.Location", "ILocation");

                            //override default method implementation
                            pub.getCurrentPosition = function(success, error, opts){
                                    function callback(transId, eventCode, result) {
                                        if (eventCode == 4) {
                                            error({message:"Position unavailable", code:2});
                                        } else {
                                            //no timestamp of location given?
                                            success( {  timestamp:null, 
                                                        coords: {
                                                                latitude:   result.ReturnValue.Latitude, 
                                                                longitude:  result.ReturnValue.Longitude, 
                                                                altitude:   result.ReturnValue.Altitude,
                                                                heading:    result.ReturnValue.Heading }
                                                    });
                                        }
                                    }
                            //location criteria
                            
                            var criteria = new Object();
                            criteria.LocationInformationClass = "BasicLocationInformation";
                            //make the call
                            provider.ILocation.GetLocation(criteria,callback);
                            }
                    } else  {                            
                            pub.getCurrentPosition = function(success, error, opts) {
                                    pub.jsonp.fetch(ipGeolocationSrv, 
                                            function( p ){ success( { timestamp: p.timestamp, 
                                                                       coords: { 
                                                                            latitude:   p.latitude, 
                                                                            longitude:  p.longitude,
                                                                            heading:    p.heading
                                                                        }
                                                                    });});
                            }
                            provider = true;
                    }


                }
                catch (e){ 
					if( typeof(console) != u ) console.log(e);					
					return false;
				}
                return  provider!=null;
        }
        return pub;
}();

@@ beagle.jpg (base64)
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
aLG49HVgyt7DC7ow7gozq5VgfQroRwRS1wRf/9k=

@@ functions.js
      var map, latLng, marker, infoWindow, ad;

      function initialize() {

        var myOptions = {
          zoom: 14,
          panControl: false, 
          streetViewControl: false, 
          scaleControl: false,
          scaleControlOptions: {position: google.maps.ControlPosition.BOTTOM_RIGHT},
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        map = new google.maps.Map(document.getElementById('googlemaps'), myOptions); 

	if (geoPosition.init()) 
	    geoPosition.getCurrentPosition(locationFound, defaultLocation, {enableHighAccuracy:true});
        else 
	    defaultLocation();

      }

      function defaultLocation() {
        showMap(38.8977, -77.0366);
      }

      function showMap(lat, lng) {

        latLng = new google.maps.LatLng(lat, lng);

        var adUnitDiv = document.createElement('div');

	var adWidth = window.innerWidth || document.documentElement.clientWidth;

	if ( adWidth >= 728 ) 
	  adFormat = google.maps.adsense.AdFormat.LEADERBOARD;
	else if ( adWidth >= 300 ) 
          adFormat = google.maps.adsense.AdFormat.SMALL_SQUARE; 
        else
          adFormat = google.maps.adsense.AdFormat.X_LARGE_VERTICAL_LINK_UNIT;      

        var adUnitOptions = {
          format: adFormat,
          position: google.maps.ControlPosition.BOTTOM,
          map: map,
          visible: false,
          publisherId: 'ca-pub-9238225005366006'
        }

//        ad = new google.maps.adsense.AdUnit(adUnitDiv, adUnitOptions);

        map.setCenter(latLng);

        marker = new google.maps.Marker({
           position: latLng, map: map, draggable: false, animation: google.maps.Animation.DROP
        });

        infoWindow = new google.maps.InfoWindow({
           content: '<div id="iw"><strong>Latitude ::</strong> ' + marker.getPosition().lat() + '<br/><strong>Longitude::</strong> ' + marker.getPosition().lng() + '</div>'
        });
	console.log(marker.getPosition().lat() + ',' + marker.getPosition().lng());
	//$.post('/email.cgi', {lat: marker.getPosition().lat(), lng: marker.getPosition().lng()});

        infoWindow.open(map, marker);

        google.maps.event.addListener(marker, 'dragstart', function (e) {
           infoWindow.close();
        });

        google.maps.event.addListener(marker, 'dragend', function (e) {
           var point = marker.getPosition();
           map.panTo(point);
           geocode(point);
        });

      }

      google.maps.event.addDomListener(window, 'load', initialize);

